name: Koda Backend CI/CD Pipeline (Staging)

on:
  push:
    branches: [ staging ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.11
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'
    
    - name: Upgrade pip and Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      
    - name: Run Tests
      env:
        # ===========================================================
        # ------------------------- GENERAL ------------------------- 
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DJANGO_SETTINGS_MODULE: ${{ secrets.DJANGO_SETTINGS_MODULE }}
      
        # ------------------------- SUPERUSER ------------------------- 
        USERNAME: ${{ secrets.USERNAME }}
        EMAIL: ${{ secrets.EMAIL }}
        PASSWORD: ${{ secrets.PASSWORD }}
      
        # ------------------------- DATABASE ------------------------- 
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      
        # ------------------------- CORS ------------------------- 
        CORS_ORIGINS: ${{ secrets.CORS_ORIGINS }}
      
        # ------------------------- CSRF ------------------------- 
        CSRF_TRUSTED_ORIGINS: ${{ secrets.CSRF_TRUSTED_ORIGINS }}
        
        # ------------------------- CDN STORAGE ------------------------- 
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
      
        # ------------------------- TEXT PROCESSING DETAILS -------------------------
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ASSISTANT_ID: ${{ secrets.ASSISTANT_ID }}

        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
        PINECONE_API_ENV: ${{ secrets.PINECONE_API_ENV }}
        PINECONE_INDEX_NAME: ${{ secrets.PINECONE_INDEX_NAME }}
        
        # -------------------------- REDIS CONFIG ----------------------------
        REDIS_URL: ${{ secrets.REDIS_URL }}
        
        # -------------------------- MEETINGS ----------------------------
        FIREFLIES_API_KEY: ${{ secrets.FIREFLIES_API_KEY }}
      
        # -------------------------- ZOOM ----------------------------
        ZOOM_ACCOUNT_ID: ${{ secrets.ZOOM_ACCOUNT_ID }}
        ZOOM_CLIENT_ID: ${{ secrets.ZOOM_CLIENT_ID }}
        ZOOM_CLIENT_SECRET: ${{ secrets.ZOOM_CLIENT_SECRET }}
        # ===========================================================

      run: |
        python manage.py test

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Build and Push Docker image for Staging
      if: github.ref == 'refs/heads/staging'
      env:
        DOCKER_BUILDKIT: 1
      run: |  
        docker build -t kodaagents:staging .
        docker tag kodaagents:staging ${{ secrets.DOCKER_HUB_USERNAME }}/kodaagents:latest
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/kodaagents:latest

    - name: Setup SSH Key and Add to Known Hosts
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

    - name: Transfer Repository to Remote Server
      run: rsync -avz -e "ssh -i ~/.ssh/id_rsa" ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/ubuntu/agency/
      
    - name: Execute Docker commands on remote server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          cd /home/ubuntu/agency/
          # Check if Miniconda is installed
          if [ ! -d "$HOME/miniconda" ]; then
            echo "Installing Miniconda..."
            chmod +x install_miniconda.sh
            ./install_miniconda.sh
          else
            echo "Miniconda already installed."
          fi

          # Check if Docker Compose is installed
          if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose..."
            chmod +x install_docker.sh
            ./install_docker.sh
          else
            echo "Docker Compose already installed."
          fi
          docker-compose down
          docker-compose up -d

# username = iamkoda
# repo name = kodaagents