name: Resume Optimizer Backend CI/CD Pipeline (Prestaging)

on:
  push:
    branches: [ prestaging ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.11
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'    
    - name: Upgrade pip and Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run Tests
      env:
        # ===========================================================
        # ------------------------- GENERAL ------------------------- 
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DJANGO_SETTINGS_MODULE: ${{ secrets.DJANGO_SETTINGS_MODULE }}
      
        # ------------------------- SUPERUSER ------------------------- 
        ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
        ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      
        # ------------------------- DATABASE ------------------------- 
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      
        # ------------------------- CORS ------------------------- 
        CORS_ORIGINS: ${{ secrets.CORS_ORIGINS }}
      
        # ------------------------- CSRF ------------------------- 
        CSRF_TRUSTED_ORIGINS: ${{ secrets.CSRF_TRUSTED_ORIGINS }}
        
        # ------------------------- CDN STORAGE ------------------------- 
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
      
        # ------------------------- TEXT PROCESSING DETAILS -------------------------
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ASSISTANT_ID: ${{ secrets.ASSISTANT_ID }}
        MODEL_NAME: ${{ secrets.MODEL_NAME}}

        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
        PINECONE_API_ENV: ${{ secrets.PINECONE_API_ENV }}
        PINECONE_INDEX_NAME: ${{ secrets.PINECONE_INDEX_NAME }}
        
        # -------------------------- REDIS CONFIG ----------------------------
        REDIS_URL: ${{ secrets.REDIS_URL }}
        # ===========================================================
      run: |
        python manage.py test

  build-and-push-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/resumeoptimizer:staging-${{ github.sha }},${{ secrets.DOCKER_HUB_USERNAME }}/resumeoptimizer:latest

  deploy:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    environment: staging
    steps:
    - uses: actions/checkout@v3
    - name: Install GPG
      run: sudo apt-get update && sudo apt-get install -y gnupg
    - name: Decrypt .env.gpg File
      env:
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: echo $GPG_PASSPHRASE | gpg --quiet --batch --yes --decrypt --passphrase-fd 0 --output ./.env ./.env.gpg
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      env:
        DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/resumeoptimizer:staging-${{ github.sha }}
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        envs: DOCKER_IMAGE
        script: |
          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          cd /home/ubuntu/resumeoptimizer/
          rsync -avz --exclude '.git' --exclude '.github' /home/ubuntu/resumeoptimizer/ ./
          docker pull $DOCKER_IMAGE
          docker-compose down
          sed -i "s|image: .*|image: $DOCKER_IMAGE|" docker-compose.yml
          docker-compose up -d
          # Health check
          for i in {1..5}; do
            if curl -f http://localhost:8000/health; then
              echo "Application is healthy"
              exit 0
            fi
            echo "Waiting for application to be ready..."
            sleep 10
          done
          echo "Application failed to become healthy. Rolling back..."
          docker-compose down
          git reset --hard HEAD~1
          docker-compose up -d
          exit 1
    
  cleanup:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
    - name: Setup crontab for Docker cleanup
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Define the cron job command with logging
          CRON_JOB="0 0 * * * /usr/bin/docker system prune -af > /var/log/docker_cleanup.log 2>&1"
          
          # Create a log file and set permissions (if not already exist)
          TOUCH_LOG_CMD="sudo touch /var/log/docker_cleanup.log && sudo chmod 644 /var/log/docker_cleanup.log"
          (crontab -l | grep -q "/var/log/docker_cleanup.log") || (eval "$TOUCH_LOG_CMD")

          # Check if the cleanup cron job already exists
          (crontab -l | grep -q "docker system prune") || (crontab -l 2>/dev/null; echo "$CRON_JOB") | sudo crontab -

          # Ensure the cron service is running
          sudo service cron restart

          # This cron job is scheduled to run at midnight every day, performing a Docker system prune
          # to remove unused Docker objects and logs the output to /var/log/docker_cleanup.log.

# username = resumeguru
# repo name = resumeoptimizer
# .env encrypt with resume
